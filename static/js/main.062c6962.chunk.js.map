{"version":3,"sources":["components/Cards/Cards.module.css","api/index.js","components/Cards/Cards.jsx","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image1.png"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Cards","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","separator","Date","toDateString","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.062c6962.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3xOHJ\",\"card\":\"Cards_card__3n_SL\",\"infected\":\"Cards_infected__1Wl9b\",\"recovered\":\"Cards_recovered__m6xtU\",\"deaths\":\"Cards_deaths__2kyL0\"};","import axios from 'axios';\r\n\r\nconst url='https://covid.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n    if (country) {\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n    try{\r\n        const { data : { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n        const modifiedData = {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate\r\n\r\n        }\r\n\r\n        return modifiedData;\r\n        console.log()\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`)\r\n\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data : {countries}} = await axios.get(`${url}/countries`);\r\n        // console.log(\"countries :\" + { data } );\r\n        return countries.map((country) => country.name)\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","// rsf tab functional programming shortcut\r\nimport React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({ data: {confirmed, recovered, deaths, lastUpdate} }) => {\r\n    \r\n    if(!confirmed) {\r\n        return 'Loading...'\r\n    }\r\n    console.log(confirmed)\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify='center'>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Infected</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp \r\n                            start={0}\r\n                            end={confirmed.value}\r\n                            separator=','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of active cases of Covid19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Recovered</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp \r\n                            start={0}\r\n                            end={recovered.value}\r\n                            separator=','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of recovered cases of Covid19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Deaths</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp \r\n                            start={0}\r\n                            end={deaths.value}\r\n                            separator=','\r\n                            />\r\n                        </Typography>                        <Typography color='textSecondary'>Real Date</Typography>\r\n                        <Typography variant='body2'>Number of deaths by Covid19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Cards;\r\n\r\n\r\n","import React, { useState, useEffect }from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ( { data: { confirmed, deaths, recovered}, country }) => {\r\n    const [dailyData, setDailyData] = useState({});\r\n\r\n    useEffect(()=>{\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n\r\n        // console.log('dailydata: ' +dailyData)\r\n        fetchAPI();\r\n    },[]);\r\n\r\n    const lineChart = (\r\n        dailyData.length \r\n        ? (\r\n        <Line \r\n        data={{\r\n            labels: dailyData.map(({ date }) => date ),\r\n            datasets: [{\r\n                data: dailyData.map(({ confirmed }) => confirmed),\r\n                label: 'Infected',\r\n                borderColor: '#3333ff',\r\n                fill: true,\r\n            },{\r\n                data: dailyData.map(({ deaths }) => deaths),\r\n                label: 'Infected',\r\n                borderColor: 'red',\r\n                backgroundColor: 'rgba(255, 0, 0, 0.5',\r\n                fill: true,\r\n\r\n            }]\r\n        }} \r\n        /> ) : null\r\n\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed\r\n        ? (\r\n            <Bar \r\n                data={{\r\n                    labels: ['Infected', 'Recovered', 'Deaths'],\r\n                    datasets: [{\r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgba(0, 0, 255, 0.5)',\r\n                            'rgba(0, 255, 0, 0.5',\r\n                            'rgba(255, 0, 0, 0.5)'\r\n                        ],\r\n                        data:[ confirmed.value, recovered.value, deaths.value]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend: { display: false },\r\n                    title: {display: true, text:`Current state in ${country}`}\r\n                }}\r\n            />\r\n        ) : null\r\n    )\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { fetchCountries } from '../../api/index';\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n\r\n    const [ fetchedCountries, setFetchedCountries ] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI= async () => {\r\n            setFetchedCountries(await fetchCountries())\r\n        }\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n    console.log(fetchedCountries)\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue='' onChange={(e)=> handleCountryChange(e.target.value)}>\r\n                <option value=''>Global</option>\r\n                {fetchedCountries.map((country,i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;\r\n","import React, { Component } from \"react\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api\";\n\nimport { Cards, Chart, CountryPicker } from \"./components\";\nimport image from './images/image1.png';\n\nclass App extends Component {\n  state = {\n    data: {},\n    country: '',\n  };\n\n  // fetching data in class based component\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    \n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country)\n    // fetch data and set state\n    console.log(fetchedData);\n    this.setState({ data: fetchedData, country: country })\n  }\n\n\n  render() {\n    const { data, country } = this.state;\n\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={image} alt='Covid19'/>\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1AnZZ\",\"image\":\"App_image__lLLJS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1K_fX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2Iu1I\"};","module.exports = __webpack_public_path__ + \"static/media/image1.d7265326.png\";"],"sourceRoot":""}
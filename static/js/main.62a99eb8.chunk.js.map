{"version":3,"sources":["components/Cards/Cards.module.css","api/index.js","components/Cards/Cards.jsx","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css"],"names":["module","exports","url","fetchData","a","axios","get","data","confirmed","recovered","deaths","lastUpdate","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","Cards","console","log","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","separator","Date","toDateString","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","CountryPicker","App","state","fetchedData","this","setState","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,+KCC7JC,EAAI,+BAEGC,EAAS,uCAAG,wCAAAC,EAAA,+EAGqDC,IAAMC,IAAIJ,GAH/D,2BAGTK,KAASC,EAHA,EAGAA,UAAWC,EAHX,EAGWA,UAAWC,EAHtB,EAGsBA,OAAQC,EAH9B,EAG8BA,WAEzCC,EAAe,CACjBJ,YACAC,YACAC,SACAC,cATa,kBAaVC,GAbU,4FAAH,qDAoBTC,EAAc,uCAAG,gCAAAT,EAAA,+EAECC,IAAMC,IAAN,UAAaJ,EAAb,WAFD,uBAEdK,EAFc,EAEdA,KAEFK,EAAeL,EAAKO,KAAI,SAACC,GAAD,MAAgB,CAC1CP,UAAWO,EAAUP,UAAUQ,MAC/BN,OAAQK,EAAUL,OAAOM,MACzBC,KAAMF,EAAUG,eAPE,kBAUfN,GAVe,yFAAH,qD,uFCyCZO,EAzDD,SAAC,GAA0D,IAAD,IAAvDZ,KAAOC,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,WAElD,OAAIH,GAGJY,QAAQC,IAAIb,GAER,yBAAKc,UAAWC,IAAOC,WACnB,kBAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,EAAGC,QAAQ,UAChC,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOY,WACzE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,YACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CACAC,MAAO,EACPC,IAAKlC,EAAUmC,MACfC,UAAU,OAGd,kBAACP,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIO,KAAKlC,GAAYmC,gBACxD,kBAACT,EAAA,EAAD,CAAYG,QAAQ,SAApB,uCAGR,kBAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOd,YACzE,kBAAC2B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,aACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CACAC,MAAO,EACPC,IAAKjC,EAAUkC,MACfC,UAAU,OAGd,kBAACP,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIO,KAAKlC,GAAYmC,gBACxD,kBAACT,EAAA,EAAD,CAAYG,QAAQ,SAApB,0CAGR,kBAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOb,SACzE,kBAAC0B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CACAC,MAAO,EACPC,IAAKhC,EAAOiC,MACZC,UAAU,OANlB,2BAQyC,kBAACP,EAAA,EAAD,CAAYC,MAAM,iBAAlB,aACrC,kBAACD,EAAA,EAAD,CAAYG,QAAQ,SAApB,oCA5CT,c,iCCsCAO,EA3CD,WAAO,IAAD,EACkBC,mBAAS,IAD3B,mBACTjC,EADS,KACEkC,EADF,KAGhBC,qBAAU,WACN,IAAMC,EAAQ,uCAAG,sBAAA/C,EAAA,kEACb6C,EADa,SACMpC,IADN,6EAAH,qDAIdO,QAAQC,IAAI,cAAeN,GAC3BoC,OAGJ,IAAMC,EACFrC,EAAUsC,OAEV,kBAAC,IAAD,CACA9C,KAAM,CACF+C,OAAQvC,EAAUD,KAAI,qBAAGG,QACzBsC,SAAU,CAAC,CACPhD,KAAMQ,EAAUD,KAAI,qBAAGN,aACvBgD,MAAO,WACPC,YAAa,UACbC,MAAM,GACR,CACEnD,KAAMQ,EAAUD,KAAI,qBAAGJ,UACvB8C,MAAO,WACPC,YAAa,MACbE,gBAAiB,sBACjBD,MAAM,OAIP,KAIX,OACI,yBAAKpC,UAAWC,IAAOC,WAClB4B,ICpCEQ,EANO,WAClB,OACI,+CC2BOC,E,4MAxBbC,MAAQ,CACNvD,KAAM,I,kMAKoBJ,I,OAApB4D,E,OAENC,KAAKC,SAAS,CAAE1D,KAAMwD,I,qIAGd,IACAxD,EAASyD,KAAKF,MAAdvD,KAER,OACE,yBAAKe,UAAWC,IAAOC,WACrB,kBAAC,EAAD,CAAOjB,KAAMA,IACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAnBU2D,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhE,QAAQgE,MAAMA,EAAMC,a,mBExI5BrF,EAAOC,QAAU,CAAC,UAAY,yB","file":"static/js/main.62a99eb8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3xOHJ\",\"card\":\"Cards_card__3n_SL\",\"infected\":\"Cards_infected__1Wl9b\",\"recovered\":\"Cards_recovered__m6xtU\",\"deaths\":\"Cards_deaths__2kyL0\"};","import axios from 'axios';\r\n\r\nconst url='https://covid.mathdro.id/api';\r\n\r\nexport const fetchData = async () => {\r\n    \r\n    try{\r\n        const { data : { confirmed, recovered, deaths, lastUpdate } } = await axios.get(url);\r\n\r\n        const modifiedData = {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate\r\n\r\n        }\r\n\r\n        return modifiedData;\r\n        console.log()\r\n    } catch {\r\n\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`)\r\n\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n\r\n    }\r\n}","// rsf tab functional programming shortcut\r\nimport React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({ data: {confirmed, recovered, deaths, lastUpdate} }) => {\r\n    \r\n    if(!confirmed) {\r\n        return 'Loading...'\r\n    }\r\n    console.log(confirmed)\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify='center'>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Infected</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp \r\n                            start={0}\r\n                            end={confirmed.value}\r\n                            separator=','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of active cases of Covid19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Recovered</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp \r\n                            start={0}\r\n                            end={recovered.value}\r\n                            separator=','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of recovered cases of Covid19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Deaths</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp \r\n                            start={0}\r\n                            end={deaths.value}\r\n                            separator=','\r\n                            />\r\n                        </Typography>                        <Typography color='textSecondary'>Real Date</Typography>\r\n                        <Typography variant='body2'>Number of deaths by Covid19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Cards;\r\n\r\n\r\n","import React, { useState, useEffect }from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = () => {\r\n    const [dailyData, setDailyData] = useState({});\r\n\r\n    useEffect(()=>{\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n\r\n        console.log('dailydata: ' +dailyData)\r\n        fetchAPI();\r\n    });\r\n\r\n    const lineChart = (\r\n        dailyData.length \r\n        ? (\r\n        <Line \r\n        data={{\r\n            labels: dailyData.map(({ date }) => date ),\r\n            datasets: [{\r\n                data: dailyData.map(({ confirmed }) => confirmed),\r\n                label: 'Infected',\r\n                borderColor: '#3333ff',\r\n                fill: true,\r\n            },{\r\n                data: dailyData.map(({ deaths }) => deaths),\r\n                label: 'Infected',\r\n                borderColor: 'red',\r\n                backgroundColor: 'rgba(255, 0, 0, 0.5',\r\n                fill: true,\r\n\r\n            }]\r\n        }} \r\n        /> ) : null\r\n\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;\r\n","import React from 'react';\r\n\r\nconst CountryPicker = () => {\r\n    return (\r\n        <h1>Country Picker</h1>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;\r\n","import React, { Component } from \"react\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api\";\n\nimport { Cards, Chart, CountryPicker } from \"./components\";\n\nclass App extends Component {\n  state = {\n    data: {},\n  };\n\n  // fetching data in class based component\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    \n    this.setState({ data: fetchedData });\n  }\n\n  render() {\n    const { data } = this.state;\n\n    return (\n      <div className={styles.container}>\n        <Cards data={data} />\n        <CountryPicker />\n        <Chart />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1AnZZ\"};"],"sourceRoot":""}